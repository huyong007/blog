{"version":3,"sources":["../src/app.js"],"names":["auth","require","MongoStore","connectMongodb","session","app","set","path","join","__dirname","use","expressLayouts","bodyParser","json","urlencoded","extended","config","cookieName","express","static","authUser","page","api","req","res","next","err","Error","status","locals","message","error","get","format","send","toString","html","render","default","errorDetails"],"mappings":";;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;IAAYA,I;;AACZ;;;;AACA;;;;;;;;AAdAC,QAAQ,eAAR;;;AAgBA,IAAMC,aAAa,IAAIC,sBAAJ,CAAmBC,wBAAnB,CAAnB;AACA,IAAMC,MAAM,wBAAZ;;AAEA;AACAA,IAAIC,GAAJ,CAAQ,OAAR,EAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAJ,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAD,IAAIK,GAAJ,CAAQC,2BAAR;;AAEA;AACA;AACAN,IAAIK,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAL,IAAIK,GAAJ,CAAQE,qBAAWC,IAAX,EAAR;AACAR,IAAIK,GAAJ,CAAQE,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAV,IAAIK,GAAJ,CAAQ,4BAAaM,iBAAOC,UAApB,CAAR;AACAZ,IAAIK,GAAJ,CAAQQ,kBAAQC,MAAR,CAAeZ,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEA;AACAJ,IAAIK,GAAJ,CAAQV,KAAKoB,QAAb;;AAEAf,IAAIK,GAAJ,CAAQ,GAAR,EAAaW,eAAb;AACAhB,IAAIK,GAAJ,CAAQ,SAAR,EAAmBY,eAAnB;;AAEA;AACAjB,IAAIK,GAAJ,CAAQ,UAAUa,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChC,MAAIC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACD,CAJD;;AAMA;AACArB,IAAIK,GAAJ,CAAQ,UAAUgB,GAAV,EAAeH,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACrC;AACAD,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAJ,IAAeJ,GAApC;AACAF,MAAIK,MAAJ,CAAWE,KAAX,GAAmBR,IAAIlB,GAAJ,CAAQ2B,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCN,GAAvC,GAA6C,EAAhE;;AAEA;AACAF,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB,EAA8BK,MAA9B,CAAqC;AACnCpB,QADmC,kBAC5B;AACLW,UAAIU,IAAJ,CAAS,EAAEH,OAAOL,IAAIS,QAAJ,EAAT,EAAT;AACD,KAHkC;AAKnCC,QALmC,kBAK5B;AACLZ,UAAIa,MAAJ,CAAW,OAAX;AACD,KAPkC;AASnCC,WATmC,sBASzB;AACR,UAAMR,eAAaS,YAAnB;AACAf,UAAIU,IAAJ,kCAAwCR,IAAIS,QAAJ,EAAxC;AACD;AAZkC,GAArC;AAcD,CApBD;;kBAsBe9B,G","file":"app.js","sourcesContent":["\n\nrequire('./models/init');\nimport express from 'express';\nimport expressLayouts from 'express-ejs-layouts';\nimport path from 'path';\nimport favicon from 'serve-favicon';\nimport logger from 'morgan';\nimport cookieParser from 'cookie-parser';\nimport bodyParser from 'body-parser';\nimport connectMongodb from 'connect-mongo';\nimport session from 'express-session';\n\nimport config from './config';\nimport * as auth from './middlewares/auth';\nimport api from './route.api';\nimport page from './route.page';\n\nconst MongoStore = new connectMongodb(session);\nconst app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\napp.use(expressLayouts);\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser(config.cookieName));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// 使用认证信息\napp.use(auth.authUser);\n\napp.use('/', page);\napp.use('/api/v1', api);\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function (err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message || err;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // the error response\n  res.status(err.status || 500).format({\n    json() {\n      res.send({ error: err.toString() });\n    },\n\n    html() {\n      res.render('error');\n    },\n\n    default() {\n      const message = `${errorDetails}`;\n      res.send(`500 Internal server error:\\n${err.toString()}`);\n    },\n  });\n});\n\nexport default app;\n"]}