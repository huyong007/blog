{"version":3,"sources":["../../src/middlewares/auth.js"],"names":["authUser","req","res","next","locals","currentUser","token","headers","signedCookies","config","cookieName","decoded","jwt","decode","jwtSecret","exp","Date","now","end","user","err","adminRequired","Error","status","isAdmin"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,8BAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1CD,MAAIE,MAAJ,CAAWC,WAAX,GAAyB,IAAzB;;AAEA,MAAMC,QACJL,IAAIM,OAAJ,CAAY,gBAAZ,KAAiCN,IAAIO,aAAJ,CAAkBC,iBAAOC,UAAzB,CAAjC,IAAyE,EAD3E;;AAGA,MAAIJ,KAAJ,EAAW;AACT,QAAI;AACF,UAAMK,UAAUC,oBAAIC,MAAJ,CAAWP,KAAX,EAAkBG,iBAAOK,SAAzB,CAAhB;AACA,UAAIH,QAAQI,GAAR,IAAeC,KAAKC,GAAL,EAAnB,EAA+B;AAC7Bf,YAAIgB,GAAJ,CAAQ,0BAAR,EAAoC,GAApC;AACA;AACD;;AAEDjB,UAAIkB,IAAJ,GAAWjB,IAAIE,MAAJ,CAAWC,WAAX,GAAyBM,OAApC;AACA,aAAOR,MAAP;AACD,KATD,CASE,OAAOiB,GAAP,EAAY;AACZ,aAAOjB,MAAP;AACD;AACF,GAbD,MAaO;AACLA;AACD;AACF,CAtBM;;AAwBA,IAAMkB,wCAAgB,SAAhBA,aAAgB,CAACpB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/C,MAAI,CAACF,IAAIkB,IAAT,EAAe;AACb,QAAIC,MAAM,IAAIE,KAAJ,CAAU,MAAV,CAAV;AACAF,QAAIG,MAAJ,GAAa,GAAb;AACApB,SAAKiB,GAAL;AACA;AACD;AACD,MAAI,CAACnB,IAAIkB,IAAJ,CAASK,OAAd,EAAuB;AACrB,QAAIJ,OAAM,IAAIE,KAAJ,CAAU,SAAV,CAAV;AACAF,SAAIG,MAAJ,GAAa,GAAb;AACApB,SAAKiB,IAAL;AACA;AACD;;AAEDjB;AACD,CAfM","file":"auth.js","sourcesContent":["import jwt from 'jwt-simple';\r\nimport config from '../config';\r\nimport UserModel from '../models/user';\r\n\r\nexport const authUser = (req, res, next) => {\r\n  res.locals.currentUser = null;\r\n\r\n  const token =\r\n    req.headers['x-access-token'] || req.signedCookies[config.cookieName] || '';\r\n\r\n  if (token) {\r\n    try {\r\n      const decoded = jwt.decode(token, config.jwtSecret);\r\n      if (decoded.exp <= Date.now()) {\r\n        res.end('Access token has expired', 400);\r\n        return;\r\n      }\r\n\r\n      req.user = res.locals.currentUser = decoded;\r\n      return next();\r\n    } catch (err) {\r\n      return next();\r\n    }\r\n  } else {\r\n    next();\r\n  }\r\n};\r\n\r\nexport const adminRequired = (req, res, next) => {\r\n  if (!req.user) {\r\n    let err = new Error('需要登录');\r\n    err.status = 403;\r\n    next(err);\r\n    return;\r\n  }\r\n  if (!req.user.isAdmin) {\r\n    let err = new Error('需要管理员权限');\r\n    err.status = 403;\r\n    next(err);\r\n    return;\r\n  }\r\n\r\n  next();\r\n};\r\n"]}